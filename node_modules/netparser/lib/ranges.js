"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.check = void 0;
const network_1 = require("./network");
let ipv4Ranges = undefined;
function createIPv4Ranges() {
    return {
        unspecified: [
            new network_1.Network("0.0.0.0/8", true)
        ],
        broadcast: [
            new network_1.Network("255.255.255.255/32")
        ],
        multicast: [
            new network_1.Network("224.0.0.0/4")
        ],
        linkLocal: [
            new network_1.Network("169.254.0.0/16")
        ],
        loopback: [
            new network_1.Network("127.0.0.0/8")
        ],
        carrierGradeNat: [
            new network_1.Network("100.64.0.0/10")
        ],
        private: [
            new network_1.Network("10.0.0.0/8"),
            new network_1.Network("172.16.0.0/12"),
            new network_1.Network("192.168.0.0/16")
        ],
        reserved: [
            new network_1.Network("192.0.0.0/24"),
            new network_1.Network("192.0.2.0/24"),
            new network_1.Network("192.88.99.0/24"),
            new network_1.Network("198.51.100.0/24"),
            new network_1.Network("203.0.113.0/24"),
            new network_1.Network("240.0.0.0/24")
        ]
    };
}
let ipv6Ranges = undefined;
function createIPv6Ranges() {
    return {
        unspecified: [
            new network_1.Network("::/128")
        ],
        linkLocal: [
            new network_1.Network("fe80::/10")
        ],
        multicast: [
            new network_1.Network("ff00::/8")
        ],
        loopback: [
            new network_1.Network("::1/128")
        ],
        uniqueLocal: [
            new network_1.Network("fc00::/7")
        ],
        ipv4Mapped: [
            new network_1.Network("::ffff:0:0/96")
        ],
        rfc6145: [
            new network_1.Network("::ffff:0:0:0/96")
        ],
        rfc6052: [
            new network_1.Network("64:ff9b::/96")
        ],
        "6to4": [
            new network_1.Network("2002::/16")
        ],
        teredo: [
            new network_1.Network("2001::/32")
        ],
        reserved: [
            new network_1.Network("2001:db8::/32")
        ]
    };
}
function hasKey(obj, key) {
    return key in obj;
}
function check(address, key) {
    if (address.isValid()) {
        let ranges = undefined;
        if (address.isIPv4()) {
            ranges = ipv4Ranges ? ipv4Ranges : createIPv4Ranges();
        }
        else {
            ranges = ipv6Ranges ? ipv6Ranges : createIPv6Ranges();
        }
        if (hasKey(ranges, key)) {
            for (let net of ranges[key]) {
                if (net.contains(address.toNetwork()))
                    return true;
            }
        }
    }
    return false;
}
exports.check = check;
//# sourceMappingURL=ranges.js.map
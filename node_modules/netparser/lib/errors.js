"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidAddress = exports.NotValidCIDR = exports.InvalidSubnet = exports.GenericFindLongestZeroHextetChain = exports.GenericBytesToAddr = exports.GenericNetworkParse = exports.BytesNotFourElements = exports.AddrNotFourElements = exports.AddrInvalidInteger = exports.NotValidBaseNetworkAddress = exports.OverflowedAddressSpace = exports.GenericOffsetAddressWithCIDR = exports.GenericGetCIDR = exports.GenericRemoveCIDR = exports.IPv6DoesNotHaveBroadcast = exports.MixingIPv4AndIPv6 = void 0;
exports.MixingIPv4AndIPv6 = new Error("mixing IPv4 and IPv6 is invalid");
exports.IPv6DoesNotHaveBroadcast = new Error("IPv6 does not have broadcast addresses");
exports.GenericRemoveCIDR = new Error("more than one '/' was detected");
exports.GenericGetCIDR = new Error("unable to get CIDR from subnet string");
exports.GenericOffsetAddressWithCIDR = new Error("unable to offset address");
exports.OverflowedAddressSpace = new Error("address space overflow detected");
exports.NotValidBaseNetworkAddress = new Error("not a valid base network address");
exports.AddrInvalidInteger = new Error("'addr' has at least one invalid integer");
exports.AddrNotFourElements = new Error("'addr' was not four elements long");
exports.BytesNotFourElements = new Error("'bytes' was not at least four elements long");
exports.GenericNetworkParse = new Error("unable to parse string");
exports.GenericBytesToAddr = new Error("unable to convert bytes to string");
exports.GenericFindLongestZeroHextetChain = new Error("unable to findLongestZeroHextetChain");
exports.InvalidSubnet = new Error("invalid subnet");
exports.NotValidCIDR = new Error("'cidr' was not a valid integer");
exports.InvalidAddress = new Error("invalid address");
//# sourceMappingURL=errors.js.map
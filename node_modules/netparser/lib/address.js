"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = void 0;
const ipv4 = __importStar(require("./ipv4"));
const ipv6 = __importStar(require("./ipv6"));
const parse = __importStar(require("./parse"));
const errors = __importStar(require("./errors"));
const ranges = __importStar(require("./ranges"));
const network_1 = require("./network");
const BEFORE = -1;
const EQUALS = 0;
const AFTER = 1;
class Address {
    constructor(address, throwErrors) {
        if (address) {
            let net = parse.network(address, throwErrors);
            if (net) {
                this.arr = net.bytes;
                return;
            }
        }
        this.arr = [];
    }
    bytes() {
        return this.arr ? this.arr : [];
    }
    setBytes(bytes) {
        if (bytes.length === 4 || bytes.length === 16) {
            this.arr = bytes;
        }
        else {
            this.arr = [];
        }
        return this;
    }
    destroy() {
        if (this.isValid()) {
            this.arr = [];
        }
        return this;
    }
    isValid() {
        return this.arr.length > 0;
    }
    is6to4() {
        return ranges.check(this, "6to4");
    }
    isIPv4() {
        return this.arr.length === 4;
    }
    isIPv6() {
        return this.arr.length === 16;
    }
    isLinkLocal() {
        return ranges.check(this, "linkLocal");
    }
    isLoopback() {
        return ranges.check(this, "loopback");
    }
    isMulticast() {
        return ranges.check(this, "multicast");
    }
    isTeredo() {
        return ranges.check(this, "teredo");
    }
    toString() {
        if (!this.isValid())
            return "";
        if (this.arr.length === 4) {
            return `${ipv4.bytesToAddr(this.arr)}`;
        }
        return `${ipv6.bytesToAddr(this.arr)}`;
    }
    toNetwork() {
        return new network_1.Network().from(new Address().setBytes(this.arr), this.arr.length * 8);
    }
    duplicate() {
        return new Address().setBytes(this.arr.slice());
    }
    lessThan(address) {
        return this.compare(address) === BEFORE;
    }
    lessThanOrEqual(address) {
        let result = this.compare(address);
        if (result === null)
            return false;
        return result <= EQUALS;
    }
    equals(address) {
        return this.compare(address) === EQUALS;
    }
    greaterThanOrEqual(address) {
        let result = this.compare(address);
        if (result === null)
            return false;
        return result >= EQUALS;
    }
    greaterThan(address) {
        return this.compare(address) === AFTER;
    }
    compare(address) {
        if (!this.isValid() || !address.isValid())
            return null;
        if (this === address)
            return EQUALS;
        if (this.arr.length < address.arr.length)
            return BEFORE;
        if (this.arr.length > address.arr.length)
            return AFTER;
        for (let i = 0; i < this.arr.length; i++) {
            if (this.arr[i] < address.arr[i])
                return BEFORE;
            if (this.arr[i] > address.arr[i])
                return AFTER;
        }
        return EQUALS;
    }
    applySubnetMask(cidr) {
        if (!this.isValid())
            return this;
        let maskBits = this.arr.length * 8 - cidr;
        for (let i = this.arr.length - 1; i >= 0; i--) {
            switch (Math.max(0, Math.min(maskBits, 8))) {
                case 0:
                    return this;
                case 1:
                    this.arr[i] &= ~1;
                    break;
                case 2:
                    this.arr[i] &= ~3;
                    break;
                case 3:
                    this.arr[i] &= ~7;
                    break;
                case 4:
                    this.arr[i] &= ~15;
                    break;
                case 5:
                    this.arr[i] &= ~31;
                    break;
                case 6:
                    this.arr[i] &= ~63;
                    break;
                case 7:
                    this.arr[i] &= ~127;
                    break;
                case 8:
                    this.arr[i] = 0;
                    break;
            }
            maskBits -= 8;
        }
        return this;
    }
    isBaseAddress(cidr) {
        if (!this.isValid() || cidr < 0 || cidr > this.arr.length * 8)
            return false;
        if (cidr === this.arr.length * 8)
            return true;
        let maskBits = this.arr.length * 8 - cidr;
        for (let i = this.arr.length - 1; i >= 0; i--) {
            switch (Math.max(0, Math.min(maskBits, 8))) {
                case 0:
                    return true;
                case 1:
                    if (this.arr[i] !== (this.arr[i] & ~1))
                        return false;
                    break;
                case 2:
                    if (this.arr[i] !== (this.arr[i] & ~3))
                        return false;
                    break;
                case 3:
                    if (this.arr[i] !== (this.arr[i] & ~7))
                        return false;
                    break;
                case 4:
                    if (this.arr[i] !== (this.arr[i] & ~15))
                        return false;
                    break;
                case 5:
                    if (this.arr[i] !== (this.arr[i] & ~31))
                        return false;
                    break;
                case 6:
                    if (this.arr[i] !== (this.arr[i] & ~63))
                        return false;
                    break;
                case 7:
                    if (this.arr[i] !== (this.arr[i] & ~127))
                        return false;
                    break;
                case 8:
                    if (this.arr[i] !== 0)
                        return false;
                    break;
            }
            maskBits -= 8;
        }
        return true;
    }
    increase(cidr, throwErrors) {
        if (this.isValid()) {
            this.offsetAddress(cidr, true, throwErrors);
        }
        else {
            if (throwErrors)
                throw errors.GenericOffsetAddressWithCIDR;
            this.destroy();
        }
        return this;
    }
    decrease(cidr, throwErrors) {
        if (this.isValid()) {
            this.offsetAddress(cidr, false, throwErrors);
        }
        else {
            if (throwErrors)
                throw errors.GenericOffsetAddressWithCIDR;
            this.destroy();
        }
        return this;
    }
    next(throwErrors) {
        if (this.isValid()) {
            this.offsetAddress(this.arr.length * 8, true, throwErrors);
        }
        else {
            if (throwErrors)
                throw errors.GenericOffsetAddressWithCIDR;
            this.destroy();
        }
        return this;
    }
    previous(throwErrors) {
        if (this.isValid()) {
            this.offsetAddress(this.arr.length * 8, false, throwErrors);
        }
        else {
            if (throwErrors)
                throw errors.GenericOffsetAddressWithCIDR;
            this.destroy();
        }
        return this;
    }
    offsetAddress(cidr, forwards, throwErrors) {
        let targetByte = Math.floor((cidr - 1) / 8);
        if (this.isValid() && targetByte >= 0 && targetByte < this.arr.length) {
            let increment = Math.pow(2, 8 - (cidr - targetByte * 8));
            this.arr[targetByte] += increment * (forwards ? 1 : -1);
            if (targetByte >= 0) {
                if (this.arr[targetByte] < 0) {
                    this.arr[targetByte] = 256 + (this.arr[targetByte] % 256);
                    this.offsetAddress(targetByte * 8, forwards, throwErrors);
                }
                else if (this.arr[targetByte] > 255) {
                    this.arr[targetByte] %= 256;
                    this.offsetAddress(targetByte * 8, forwards, throwErrors);
                }
            }
            else {
                if (throwErrors)
                    throw errors.OverflowedAddressSpace;
                this.destroy();
            }
        }
        else {
            if (throwErrors)
                throw errors.GenericOffsetAddressWithCIDR;
            this.destroy();
        }
    }
}
exports.Address = Address;
//# sourceMappingURL=address.js.map
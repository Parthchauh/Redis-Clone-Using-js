"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Matcher = void 0;
const shared = __importStar(require("./shared"));
const sort = __importStar(require("./sort"));
class Matcher {
    constructor(networks) {
        this.sorted = [];
        let subnets = [];
        if (networks) {
            for (let s of networks) {
                let net = shared.parseBaseNetwork(s, false, false);
                if (net && net.isValid())
                    subnets.push(net);
            }
            shared.sortNetworks(subnets);
            this.sorted = shared.summarizeSortedNetworks(subnets);
        }
    }
    has(network) {
        let net = shared.parseBaseNetwork(network, false, false);
        if (!net || !net.isValid())
            return false;
        let idx = sort.binarySearchForInsertionIndex(net, this.sorted);
        if (idx < 0)
            return false;
        if (idx < this.sorted.length && this.sorted[idx].contains(net))
            return true;
        if (idx - 1 >= 0 && this.sorted[idx - 1].contains(net))
            return true;
        return false;
    }
    get(network) {
        let net = shared.parseBaseNetwork(network, false, false);
        if (!net || !net.isValid())
            return null;
        let idx = sort.binarySearchForInsertionIndex(net, this.sorted);
        if (idx < 0)
            return null;
        if (idx < this.sorted.length && this.sorted[idx].contains(net))
            return this.sorted[idx].toString();
        if (idx - 1 >= 0 && this.sorted[idx - 1].contains(net))
            return this.sorted[idx - 1].toString();
        return null;
    }
    add(network) {
        let net = shared.parseBaseNetwork(network, false, false);
        if (!net || !net.isValid())
            return this;
        let idx = sort.binarySearchForInsertionIndex(net, this.sorted);
        if (idx < this.sorted.length && this.sorted[idx].compare(net) === 0)
            return this;
        this.sorted.splice(idx, 0, net);
        return this;
    }
}
exports.Matcher = Matcher;
//# sourceMappingURL=match.js.map
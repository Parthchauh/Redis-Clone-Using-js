"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
const parse = __importStar(require("./parse"));
const errors = __importStar(require("./errors"));
const address_1 = require("./address");
const BEFORE = -1;
const EQUALS = 0;
const AFTER = 1;
class Network {
    constructor(network, throwErrors) {
        this.addr = new address_1.Address();
        this.netbits = -1;
        if (network) {
            let net = parse.network(network, throwErrors);
            if (net) {
                this.addr.setBytes(net.bytes);
                this.netbits = net.cidr;
            }
        }
    }
    from(address, cidr) {
        this.addr.setBytes(address.bytes().slice());
        return this.setCIDR(cidr);
    }
    destroy() {
        if (!this.addr.isValid()) {
            this.addr.destroy();
        }
        this.netbits = -1;
        return this;
    }
    cidr() {
        if (this.isValid()) {
            return this.netbits;
        }
        return Number.NaN;
    }
    isValid() {
        return this.addr.isValid() && this.netbits !== -1;
    }
    duplicate() {
        let network = new Network();
        if (this.isValid()) {
            network.addr.setBytes(this.addr.bytes().slice());
            network.netbits = this.netbits;
        }
        return network;
    }
    toString() {
        if (this.isValid()) {
            return `${this.addr.toString()}/${this.netbits}`;
        }
        return "";
    }
    next() {
        this.addr.increase(this.netbits);
        return this;
    }
    previous() {
        this.addr.decrease(this.netbits);
        return this;
    }
    lastAddr() {
        let addr = this.addr.duplicate().applySubnetMask(this.netbits);
        let maxCIDR = this.addr.bytes().length * 8;
        for (let i = this.netbits + 1; i <= maxCIDR; i++)
            addr.increase(i);
        return addr;
    }
    setCIDR(cidr, throwErrors) {
        if (!this.addr.isValid()) {
            if (throwErrors)
                throw errors.InvalidSubnet;
            this.destroy();
        }
        else {
            cidr = Math.floor(cidr);
            if (cidr >= 0 && cidr <= this.addr.bytes().length * 8) {
                this.netbits = cidr;
            }
            else {
                if (throwErrors)
                    throw errors.NotValidCIDR;
                this.destroy();
            }
        }
        return this;
    }
    compare(network) {
        if (!this.isValid() || !network.isValid())
            return null;
        let cmp = this.addr.compare(network.addr);
        if (cmp !== EQUALS)
            return cmp;
        if (this.netbits < network.netbits)
            return BEFORE;
        if (this.netbits > network.netbits)
            return AFTER;
        return EQUALS;
    }
    contains(network) {
        if (!this.isValid() || !network.isValid())
            return false;
        if (this.addr.bytes().length !== network.addr.bytes().length)
            return false;
        if (this.netbits === 0)
            return true;
        if (network.netbits === 0)
            return false;
        if (this.addr.compare(network.addr) === AFTER)
            return false;
        let next = this.duplicate().next();
        let otherNext = network.duplicate().next();
        if (!next.isValid())
            return true;
        if (next.addr.compare(otherNext.addr) === BEFORE)
            return false;
        return true;
    }
    intersects(network) {
        if (!this.isValid() || !network.isValid())
            return false;
        if (this.addr.bytes().length !== network.addr.bytes().length)
            return false;
        if (this.netbits === 0 || network.netbits == 0)
            return true;
        let cmp = this.addr.compare(network.addr);
        if (cmp === EQUALS)
            return true;
        let alpha, bravo;
        if (cmp === BEFORE) {
            alpha = this.duplicate().next();
            bravo = network.duplicate().next();
        }
        else {
            alpha = network.duplicate().next();
            bravo = this.duplicate().next();
        }
        if (!alpha.isValid() || !bravo.isValid())
            return true;
        if (alpha.addr.greaterThanOrEqual(bravo.addr))
            return true;
        return false;
    }
    adjacent(network) {
        if (!this.isValid() || !network.isValid())
            return false;
        if (this.addr.bytes().length !== network.addr.bytes().length)
            return false;
        if (this.netbits === 0 || network.netbits == 0)
            return true;
        let cmp = this.addr.compare(network.addr);
        if (cmp === EQUALS)
            return false;
        let alpha, bravo;
        if (cmp === BEFORE) {
            alpha = this.duplicate().next();
            bravo = network;
        }
        else {
            alpha = network.duplicate().next();
            bravo = this;
        }
        if (!alpha.isValid())
            return false;
        if (alpha.addr.compare(bravo.addr) === EQUALS)
            return true;
        return false;
    }
}
exports.Network = Network;
//# sourceMappingURL=network.js.map